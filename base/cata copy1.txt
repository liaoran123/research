package base

/*
ca- 目录表
.k=ca-tid;v=文章标题-url-isdir
.isdir是否是目录。添加时，没有内容即是目录isdir=1
.isdir，主要是用于范围查询时查找子id集合.
------------
f- fid的索引表
.k=fid-tid;v=空
.tid=自动增值的目录表id,即a.tid
*/

//每个表对应一个结构体

//目录表
type cata struct {
	tbn  string
	id   int
	fidx *fididx
	ainc *Autoinc
}

func Newcata() *cata {
	return &cata{
		tbn:  "ca", //表名
		ainc: NewAutoinc(Con.fulltext),
		fidx: Newfididx(),
	}
}

//目录数据少，使用频繁，故适宜加载入内存
//删除目录时不能真正删除，只需将除id外置空即可。这样保证通过id直接匹配数组下标。

//添加时用
func (c *cata) SeAutotid() {
	c.id = c.ainc.Getid()
}

//修改删除用
func (c *cata) Setid(id int) {
	c.id = id
}

//添加目录标题，url，网址或文件地址
func (c *cata) Insert(title, isdir string, fid int) (r bool) {
	//添加目录
	err = Con.Getartdb().Db.Put(JoinBytes([]byte(c.tbn+"-"), IntToBytes(c.id)), JoinBytes([]byte(title+"-"+isdir+"-"), IntToBytes(fid)), nil) //添加目录标题
	Chekerr()
	r = err == nil
	r = r && c.fidx.Insert(fid, c.id) //如果成功，添加目录fid索引
	if r {                            //如果成功，添加目录到内存
		CRAMs.cataRAM = append(CRAMs.cataRAM, NewcataRAM(c.id, fid, title, isdir)) //实时加入内存
	}
	return
}

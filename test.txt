package main

import (
	"fmt"
	"research/base"
	"strings"

	"github.com/syndtr/goleveldb/leveldb/util"
)

//-------测试代码-----------
var db *base.Levdb

func Test() {
	db = base.Con.Getartdb() //base.Newleveldbs("db")
	db.FindRangeFun("ca~", "ca~Z", print)
	/*
		fmt.Println("-------目录----------\n")
		base.Con.Getartdb().FindPrefixFun("ca\n", print)

		fmt.Println("-------目录fid索引----------\n")
		base.Con.Getartdb().FindPrefixFun("cf\n", print1)

		fmt.Println("-------目录fid对应文章id----------\n")
		base.Con.Getartdb().FindPrefixFun("fa\n", print1)

		fmt.Println("-------文章id对应目录fid----------\n")
		base.Con.Getartdb().FindPrefixFun("af\n", print1)

		fmt.Println("-------文章----------\n")
		base.Con.Getartdb().FindPrefixFun("c\n", print)

		fmt.Println("-------文章索引----------\n")
		base.Con.Getartdb().FindPrefixFun("i\n", print)
	*/
}
func print(k, v []byte) {

	key := string(k)
	id := strings.Split(key, "~")[1]
	iid := base.BytesToInt([]byte(id))
	//fmt.Printf("iid: %v\n", iid)
	//fmt.Println(key, ",", string(v), strings.Trim(string(v), "0"), strings.Trim(string(v), "0")+"1", "---------------")

	//--没有子目录即是叶子目录
	Prefix := base.JoinBytes([]byte("cf~"), base.IntToBytes(iid), []byte("~"))
	iter := db.Db.NewIterator(util.BytesPrefix([]byte(Prefix)), nil)
	loop := 0
	for iter.Next() {
		//fmt.Println(string(iter.Key()), ",", string(iter.Value()))
		loop++
		break
	}
	if loop == 0 {
		//fmt.Println("isleaf")
		fmt.Println(key, ",", string(v))
		db.Db.Put(k, []byte(strings.Trim(string(v), "0")+"1"), nil)
	}
}

/*
func print1(k, v []byte) {
	ks := strings.Split(string(k), "\n")
	k1 := pubgo.BytesToInt([]byte(ks[1]))
	k2 := pubgo.BytesToInt([]byte(ks[2]))
	fmt.Println(ks, k1, k2)
}
*/

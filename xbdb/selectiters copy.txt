//小白数据库
//查找模板函数类
package xbdb

import (
	"bytes"

	"github.com/syndtr/goleveldb/leveldb/iterator"
)

type Iters struct {
	iter        iterator.Iterator //数据游标
	ok          bool              //游标是否结束
	asc         bool              //asc,升/降序
	bint, count int               //第几条开始
	//f    func(k, v []byte) bool //执行函数
}
type KV struct {
	//K, V []byte// golang [][]byte追加有bug，元素被后面的覆盖
	K, V string
}

func NewIters(iter iterator.Iterator, ok, asc bool, bint, count int) *Iters {
	return &Iters{
		iter:  iter,
		ok:    ok,
		asc:   asc,
		bint:  bint,
		count: count,
	}
}

//遍历结果集模板函数
func (i *Iters) ForData() (r []KV) {
	loop, succ := -1, 0
	kv := KV{}
	for i.ok {
		loop++
		if loop < i.bint {
			i.ok = itermove[i.asc](i.iter)
			continue
		}
		kv.K = string(i.iter.Key())
		kv.V = string(i.iter.Value())
		r = append(r, kv)
		succ++
		i.ok = itermove[i.asc](i.iter)
		if i.count != -1 { //-1不限制条数
			if succ >= i.count {
				break
			}
		}
	}
	i.iter.Release()
	return
}

//遍历结果集，执行函数为参数
func (i *Iters) ForDataFun(f func(k, v []byte) bool) {
	for i.ok {
		if f(i.iter.Key(), i.iter.Value()) {
			i.ok = itermove[i.asc](i.iter)
		} else {
			break
		}
	}
	i.iter.Release()
}

//遍历结果集，转换为[]map[string]string
func (i *Iters) ForDataToMap(ifo *TableInfo) (r []map[string]string) {

	var ks [][]byte
	var key []byte
	for i.ok {
		tmap := make(map[string]string, len(ifo.Fields))
		ks = bytes.Split(i.iter.Key(), []byte(Split))
		key = ks[len(ks)-1]
		tmap[ifo.Fields[0]] = ifo.ByteChString(ifo.FieldType[0], key)
		ks = bytes.Split(i.iter.Value(), []byte(Split))
		for j, v := range ks {
			tmap[ifo.Fields[j+1]] = ifo.ByteChString(ifo.FieldType[j+1], v)
		}
		r = append(r, tmap)
		i.ok = itermove[i.asc](i.iter)
	}
	i.iter.Release()
	return
}
